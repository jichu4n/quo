// Symbol tables.
let globalVars, localVars, fns, stringConstantOffsets, nextStringConstantOffset, loopId, classes;
fn symbolsInit(stringConstantOffset) {
  globalVars = _dictNew(0);
  localVars = _dictNew(0);
  fns = _dictNew(0);
  stringConstantOffsets = _dictNew(0);
  nextStringConstantOffset = stringConstantOffset;
  loopId = 1;
  classes = _dictNew(0);
}
fn symbolsCleanUp() {
  _dictDelete(globalVars);
  _dictDelete(localVars);
  _dictDelete(fns);
  _dictDelete(stringConstantOffsets);
  nextStringConstantOffset = 0;
  loopId = 0;
  _dictDelete(classes);
}
fn addGlobalVar(name) {
  _dictSet(globalVars, name, 1, 0);
}
fn isGlobalVar(name) {
  // Assume anything starting with underscore is a global variable.
  // This is necessary to allow the quo2 runtime to access global state
  // like $_classes.
  if (_strGetChar(name, 0) == 95) {  // _
    return 1;
  }
  return _dictFind(globalVars, name) >= 0;
}
fn addLocalVar(name) {
  _dictSet(localVars, name, 1, 0);
}
fn isLocalVar(name) {
  return _dictFind(localVars, name) >= 0;
}
fn getOrAddStringConstantOffset(str) {
  let offset;
  offset = _dictGet(stringConstantOffsets, str);
  if (offset) {
    return offset;
  }
  offset = nextStringConstantOffset;
  _dictSet(stringConstantOffsets, str, offset, 0);
  nextStringConstantOffset = nextStringConstantOffset + _strLen(str) + 1;
  return offset;
}

// Pointer to next char in input string.
let inputPtr;

// Compile expressions.
fn compileExpr0() {
  let token, tokenValue, token2, tokenValue2, output, origInputPtr, outputPrefix;

  tokenValue = _strNew(0);
  token = nextToken(tokenValue);

  // Number literal
  if (token == 1) {
    output = _strFromRaw("(i32.const ");
    _strMerge(output, tokenValue);
    _strPushRaw(output, ")");
    return output;
  }

  // String literal
  if (token == 2) {
    output = _strFromRaw("(i32.const ");
    _strPushInt(output, getOrAddStringConstantOffset(tokenValue));
    _strDelete(tokenValue);
    _strPushRaw(output, ")");
    return output;
  }

  // Parenthesis
  if (token == 40) {
    output = compileExpr();
    expectToken(41, tokenValue);
    _strDelete(tokenValue);
    return output;
  }

  // Identifier or function call
  if (token == 3) {
    origInputPtr = inputPtr;
    tokenValue2 = _strNew(0);
    token2 = nextToken(tokenValue2);
    if (token2 == 40) {  // (
      // Function call
      output = _strFromRaw("(call $");
      _strMerge(output, tokenValue);
      origInputPtr = inputPtr;
      token2 = nextToken(tokenValue2);
      if (token2 != 41)  {  // )
        inputPtr = origInputPtr;
        while (1) {
          _strPushRaw(output, " ");
          _strMerge(output, compileExpr());
          token2 = nextToken(tokenValue2);
          if (token2 == 41) {  // close parenthesis
            break;
          } else if (token2 == 44) { // ,
            // Do nothing
          } else {
            _throw("Expected ',' or ')' after function call argument");
          }
        }
      }
      _strPushRaw(output, ")");
    } else {
      // Identifier
      inputPtr = origInputPtr;
      if (isLocalVar(tokenValue)) {
        outputPrefix = "(local.get $";
      } else if (isGlobalVar(tokenValue)) {
        outputPrefix = "(global.get $";
      } else {
        output = _strFromRaw("Undeclared variable '");
        _strMerge(output, tokenValue);
        _strPushRaw(output, "' in expression");
        _throw(_strToRaw(output));
      }
      output = _strFromRaw(outputPrefix);
      _strMerge(output, tokenValue);
      _strPushRaw(output, ")");
    }
    _strDelete(tokenValue2);
    return output;
  }

  // new MyClass()
  if (token == 13) {
    expectToken(3, tokenValue);  // identifier
    output = _strFromRaw("(call $_class_");
    _strPush(output, tokenValue);
    _strPushRaw(output, "_new)");
    expectToken(40, tokenValue);  // (
    expectToken(41, tokenValue);  // )
    _strDelete(tokenValue);
    return output;
  }

  output = _strFromRaw("Expected expression, got token type ");
  _strPushInt(output, token);
  _strPushRaw(output, " with value '");
  _strMerge(output, tokenValue);
  _strPushRaw(output, "'");
  _throw(_strToRaw(output));
}
fn compileExpr1a() {
  let token, tokenValue, leftOutput, origInputPtr, output;
  leftOutput = compileExpr0();
  tokenValue = _strNew(0);
  while (1) {
    origInputPtr = inputPtr;
    token = nextToken(tokenValue);
    if (token == 46) {  // .
      expectToken(3, tokenValue);  // field name
      output = _strFromRaw("(call $_objGet ");
      _strMerge(output, leftOutput);
      _strPushRaw(output, " (i32.const ");
      _strPushInt(output, getOrAddStringConstantOffset(tokenValue));
      _strPushRaw(output, "))");
      leftOutput = output;
    } else {
      inputPtr = origInputPtr;
      _strDelete(tokenValue);
      return leftOutput;
    }
  }
}
fn compileExpr1b() {
  let token, tokenValue, output, rightOutput, origInputPtr, outputPrefix;
  origInputPtr = inputPtr;
  tokenValue = _strNew(0);
  token = nextToken(tokenValue);
  _strDelete(tokenValue);
  if (token == 45) {  // -
    outputPrefix = "(i32.neg ";
  } else if (token == 33) {  // !
    outputPrefix = "(i32.eqz ";
  } else {
    inputPtr = origInputPtr;
    return compileExpr1a();
  }
  output = _strFromRaw(outputPrefix);
  _strMerge(output, compileExpr1a());
  _strPushRaw(output, ")");
  return output;
}
fn compileExpr2() {
  let token, tokenValue, output, leftOutput, rightOutput, origInputPtr, outputPrefix;
  leftOutput = compileExpr1b();
  tokenValue = _strNew(0);
  while (1) {
    origInputPtr = inputPtr;
    token = nextToken(tokenValue);
    if (token == 42) {  // *
      outputPrefix = "(i32.mul ";
    } else if (token == 47) {  // /
      outputPrefix = "(i32.div_s ";
    } else if (token == 37) {  // %
      outputPrefix = "(i32.rem_s ";
    } else {
      inputPtr = origInputPtr;
      break;
    }
    rightOutput = compileExpr1b();
    output = _strFromRaw(outputPrefix);
    _strMerge(output, leftOutput);
    _strPushRaw(output, " ");
    _strMerge(output, rightOutput);
    _strPushRaw(output, ")");
    leftOutput = output;
  }
  _strDelete(tokenValue);
  return leftOutput;
}
fn compileExpr3() {
  let token, tokenValue, output, leftOutput, rightOutput, origInputPtr, outputPrefix;
  leftOutput = compileExpr2();
  tokenValue = _strNew(0);
  while (1) {
    origInputPtr = inputPtr;
    token = nextToken(tokenValue);
    if (token == 43) {  // +
      outputPrefix = "(i32.add ";
    } else if (token == 45) {  // -
      outputPrefix = "(i32.sub ";
    } else {
      inputPtr = origInputPtr;
      break;
    }
    rightOutput = compileExpr2();
    output = _strFromRaw(outputPrefix);
    _strMerge(output, leftOutput);
    _strPushRaw(output, " ");
    _strMerge(output, rightOutput);
    _strPushRaw(output, ")");
    leftOutput = output;
  }
  _strDelete(tokenValue);
  return leftOutput;
}
fn compileExpr4() {
  let token, tokenValue, output, leftOutput, rightOutput, origInputPtr, outputPrefix;
  leftOutput = compileExpr3();
  tokenValue = _strNew(0);
  while (1) {
    origInputPtr = inputPtr;
    token = nextToken(tokenValue);
    if (token == 189) {  // ==
      outputPrefix = "(i32.eq ";
    } else if (token == 161) {  // !=
      outputPrefix = "(i32.ne ";
    } else if (token == 62) {  // >
      outputPrefix = "(i32.gt_s ";
    } else if (token == 60) {  // <
      outputPrefix = "(i32.lt_s ";
    } else if (token == 190) {  // >=
      outputPrefix = "(i32.ge_s ";
    } else if (token == 188) {  // <=
      outputPrefix = "(i32.le_s ";
    } else {
      inputPtr = origInputPtr;
      break;
    }
    rightOutput = compileExpr3();
    output = _strFromRaw(outputPrefix);
    _strMerge(output, leftOutput);
    _strPushRaw(output, " ");
    _strMerge(output, rightOutput);
    _strPushRaw(output, ")");
    leftOutput = output;
  }
  _strDelete(tokenValue);
  return leftOutput;
}
fn compileExpr5() {
  let token, tokenValue, output, leftOutput, rightOutput, origInputPtr, outputPrefix;
  let len1, len2, len3;
  leftOutput = compileExpr4();
  tokenValue = _strNew(0);
  while (1) {
    origInputPtr = inputPtr;
    token = nextToken(tokenValue);
    if (token == 166) {  // &&
      outputPrefix = "(call $_and ";
    } else {
      inputPtr = origInputPtr;
      break;
    }
    rightOutput = compileExpr4();
    output = _strFromRaw(outputPrefix);
    len1 = _strLen(output);
    len2 = _strLen(leftOutput);
    len3 = _strLen(rightOutput);
    _strMerge(output, leftOutput);
    _strPushRaw(output, " ");
    _strMerge(output, rightOutput);
    _strPushRaw(output, ")");
    leftOutput = output;
  }
  _strDelete(tokenValue);
  return leftOutput;
}
fn compileExpr6() {
  let token, tokenValue, output, leftOutput, rightOutput, origInputPtr, outputPrefix;
  leftOutput = compileExpr5();
  tokenValue = _strNew(0);
  while (1) {
    origInputPtr = inputPtr;
    token = nextToken(tokenValue);
    if (token == 252) {  // ||
      outputPrefix = "(call $_or ";
    } else {
      inputPtr = origInputPtr;
      break;
    }
    rightOutput = compileExpr5();
    output = _strFromRaw(outputPrefix);
    _strMerge(output, leftOutput);
    _strPushRaw(output, " ");
    _strMerge(output, rightOutput);
    _strPushRaw(output, ")");
    leftOutput = output;
  }
  _strDelete(tokenValue);
  return leftOutput;
}
fn compileExpr() {
  return compileExpr6();
}
fn expectToken(expectedToken, tokenValue) {
  let actualToken, output;
  actualToken = nextToken(tokenValue);
  if (actualToken != expectedToken) {
    output = _strFromRaw("Expected token ");
    _strPushInt(output, expectedToken);
    _strPushRaw(output, ", but received token ");
    _strPushInt(output, actualToken);
    _strPushRaw(output, " with value '");
    _strMerge(output, tokenValue);
    _strPushRaw(output, "'");
    _throw(_strToRaw(output));
  }
}


// Compile statements, blocks and functions.
fn compileStmt(indentLevel) {
  let token, tokenValue, token2, tokenValue2, output, outputPrefix, origInputPtr;
  
  origInputPtr = inputPtr;
  tokenValue = _strNew(0);
  token = nextToken(tokenValue);

  // Let
  if (token == 5) {
    output = _strNew(0);
    while (1) {
      expectToken(3, tokenValue);  // identifier
      addLocalVar(tokenValue);
      _strPushRaw(output, "(local $");
      _strPush(output, tokenValue);
      token = nextToken(tokenValue);
      if (token == 58) {  // :
        expectToken(3, tokenValue);
        token = nextToken(tokenValue);
      }
      _strPushRaw(output, " i32)");
      if (token == 59) {  // ;
        break;
      } else if (token == 44) {  // ,
        _strPushRaw(output, " ");
      } else {
        _strPushRaw(output, "Expected ',' or ';' in let statement, got ");
        _strPushInt(output, token);
        _strPushRaw(output, " with value '");
        _strMerge(output, tokenValue);
        _strPushRaw(output, "'");
        _throw(_strToRaw(output));
      }
    }
    _strDelete(tokenValue);
    return output;
  }

  // If
  if (token == 6) {
    output = _strFromRaw("(if ");
    expectToken(40, tokenValue);  // (
    _strMerge(output, compileExpr());
    expectToken(41, tokenValue);  // )
    _strPushRaw(output, "\n");
    // Then
    _strMerge(output, indent(indentLevel));
    _strPushRaw(output, "  (then\n");
    _strMerge(output, compileBlock(indentLevel + 2));
    _strMerge(output, indent(indentLevel));
    _strPushRaw(output, "  )\n");
    // Else
    origInputPtr = inputPtr;
    token = nextToken(tokenValue);
    if (token == 7) {  // else
      _strMerge(output, indent(indentLevel));
      _strPushRaw(output, "  (else\n");
      _strMerge(output, compileBlock(indentLevel + 2));
      _strMerge(output, indent(indentLevel));
      _strPushRaw(output, "  )\n");
    } else {
      inputPtr = origInputPtr;
    }
    // Closing
    _strMerge(output, indent(indentLevel));
    _strPushRaw(output, ")");
    _strDelete(tokenValue);
    return output;
  }

  // While
  if (token == 8) {
    output = _strFromRaw("(block $loop_");
    _strPushInt(output, loopId);
    _strPushRaw(output, "_end (loop $loop_");
    _strPushInt(output, loopId);
    _strPushRaw(output, "\n");
    _strMerge(output, indent(indentLevel));
    _strPushRaw(output, "  (br_if $loop_");
    _strPushInt(output, loopId);
    _strPushRaw(output, "_end (i32.eqz ");
    expectToken(40, tokenValue);  // (
    _strMerge(output, compileExpr());
    expectToken(41, tokenValue);  // )
    _strPushRaw(output, "))\n");
    loopId = loopId + 1;
    _strMerge(output, compileBlock(indentLevel + 1));
    loopId = loopId - 1;
    _strMerge(output, indent(indentLevel));
    _strPushRaw(output, "  (br $loop_");
    _strPushInt(output, loopId);
    _strPushRaw(output, ")\n");
    _strMerge(output, indent(indentLevel));
    _strPushRaw(output, "))");
    _strDelete(tokenValue);
    return output;
  }

  // Break
  if (token == 10) {
    if (loopId <= 1) {
      _throw("Found break statement outside of a loop block");
    }
    expectToken(59, tokenValue);  // ;
    output = _strFromRaw("(br $loop_");
    _strPushInt(output, loopId - 1);
    _strPushRaw(output, "_end)");
    _strDelete(tokenValue);
    return output;
  }

  // Continue
  if (token == 11) {
    if (loopId <= 1) {
      _throw("Found continue statement outside of a loop block");
    }
    expectToken(59, tokenValue);  // ;
    output = _strFromRaw("(br $loop_");
    _strPushInt(output, loopId - 1);
    _strPushRaw(output, ")");
    _strDelete(tokenValue);
    return output;
  }

  // Return
  if (token == 9) {
    origInputPtr = inputPtr;
    token = nextToken(tokenValue);
    if (token == 59) {
      output = _strFromRaw("(return (i32.const 0))");
    } else {
      inputPtr = origInputPtr;
      output = _strFromRaw("(return ");
      _strMerge(output, compileExpr());
      _strPushRaw(output, ")");
      expectToken(59, tokenValue);  // ;
    }
    _strDelete(tokenValue);
    return output;
  }

  // Assignment
  if (token == 3) {  // identifier
    tokenValue2 = _strNew(0);
    token2 = nextToken(tokenValue2);
    _strDelete(tokenValue2);
    if (token2 == 61) {  // =
      if (isLocalVar(tokenValue)) {
        outputPrefix = "(local.set $";
      } else if (isGlobalVar(tokenValue)) {
        outputPrefix = "(global.set $";
      } else {
        output = _strFromRaw("Undeclared variable '");
        _strPush(output, tokenValue);
        _strPushRaw(output, "' in assignment");
        _throw(_strToRaw(output));
      }
      output = _strFromRaw(outputPrefix);
      _strPush(output, tokenValue);
      _strPushRaw(output, " ");
      _strMerge(output, compileExpr());
      _strPushRaw(output, ")");
      expectToken(59, tokenValue);  // ;
      _strDelete(tokenValue);
      return output;
    }
  }

  // Delete
  if (token == 14) {  // delete
    output = _strFromRaw("(call $_free ");
    _strMerge(output, compileExpr());
    expectToken(59, tokenValue);  // ;
    _strPushRaw(output, ")");
    _strDelete(tokenValue);
    return output;
  }

  // Expression
  output = _strFromRaw("(drop ");
  inputPtr = origInputPtr;
  _strMerge(output, compileExpr());
  _strPushRaw(output, ")");
  expectToken(59, tokenValue);  // ;
  _strDelete(tokenValue);
  return output;
}
fn compileBlock(indentLevel) {
  let token, tokenValue, output, origInputPtr;

  origInputPtr = inputPtr;
  tokenValue = _strNew(0);
  token = nextToken(tokenValue);
  output = _strNew(0);

  if (token == 123) {  // {
    while (1) {
      origInputPtr = inputPtr;
      token = nextToken(tokenValue);
      if (token == 125) {  // }
        break;
      }
      inputPtr = origInputPtr;
      _strMerge(output, indent(indentLevel));
      _strMerge(output, compileStmt(indentLevel));
      _strPushRaw(output, "\n");
    }
  } else {
    inputPtr = origInputPtr;
    _strMerge(output, indent(indentLevel));
    _strMerge(output, compileStmt(indentLevel));
    _strPushRaw(output, "\n");
  }

  _strDelete(tokenValue);
  return output;
}
fn compileFn() {
  let token, tokenValue, name, output, origInputPtr;

  tokenValue = _strNew(0);
  expectToken(4, tokenValue);  // fn

  output = _strFromRaw("  (func $");
  expectToken(3, tokenValue);
  name = _strClone(tokenValue);
  _strPush(output, name);

  // Parameters
  expectToken(40, tokenValue);  // (
  _dictClear(localVars);
  origInputPtr = inputPtr;
  token = nextToken(tokenValue);
  if (token != 41) {  // )
    inputPtr = origInputPtr;
    while (1) {
      expectToken(3, tokenValue);  // identifier
      addLocalVar(tokenValue);
      _strPushRaw(output, " (param $");
      _strPush(output, tokenValue);
      token = nextToken(tokenValue);
      if (token == 58) {  // :
        expectToken(3, tokenValue);
        token = nextToken(tokenValue);
      }
      _strPushRaw(output, " i32)");
      if (token == 41) {  // )
        break;
      } else if ( token == 44) {  // ,
        // continue;
      } else {
        _strClear(output);
        _strPushRaw(output, "Expected ',' or ')' after function parameter, got ");
        _strPushInt(output, token);
        _strPushRaw(output, " with value '");
        _strMerge(output, tokenValue);
        _strPushRaw(output, "'");
        _throw(_strToRaw(output));
      }
    }
  }

  origInputPtr = inputPtr;
  token = nextToken(tokenValue);
  if (token == 58) {  // :
    expectToken(3, tokenValue);
  } else {
    inputPtr = origInputPtr;
  }
  _strPushRaw(output, " (result i32)\n");

  // Body
  _strMerge(output, compileBlock(2));
  _strPushRaw(output, "    (i32.const 0)\n  )\n  (export ");
  _strPushChar(output, 34);  // "
  _strPush(output, name);
  _strPushChar(output, 34);  // "
  _strPushRaw(output, " (func $");
  _strPush(output, name);
  _strPushRaw(output, "))\n");
  
  _dictClear(localVars);
  _strDelete(name);
  _strDelete(tokenValue);
  return output;
}
// How objects are laid out in memory:
//   - The first i32 is the class ID
//   - The rest of the fields follow in declaration order, where each field is
//     an i32
// Each class declaration generates the following:
//   - $_class_MyClass_size: A global i32, the size of the object in bytes
//   - $_class_MyClass_new: Instantiate a new object
//   - $_class_MyClass_fields: A function that returns a dict mapping field names
//     to their offsets in the object
// At the end of the module, we generate a $_classesInit function that
// creates a global array $_classes, where the index is the class ID and each
// element is a pointer to the corresponding class's $class_MyClass_fields function.
fn compileClass() {
  let token, tokenValue, className, output, offset, classId;

  tokenValue = _strNew(0);
  expectToken(12, tokenValue);  // class

  expectToken(3, tokenValue);
  className = _strClone(tokenValue);
  classId = _dictLen(classes) + 1;
  _dictSet(classes, className, classId, 1);
  expectToken(123, tokenValue); // {

  output = _strFromRaw("  (func $_class_");
  _strPush(output, className);
  _strPushRaw(output, "_fields (result i32)\n");
  _strPushRaw(output, "    (local $fields i32)\n");
  _strPushRaw(output, "    (local.set $fields (call $_dictNew (i32.const 0)))\n");
  offset = 4;
  while (1) {
    token = nextToken(tokenValue);
    if (token == 125) {  // }
      break;
    } else if (token == 3) {
      _strPushRaw(output, "    (call $_dictSetRaw (local.get $fields) (i32.const ");
      _strPushInt(output, getOrAddStringConstantOffset(tokenValue));
      _strPushRaw(output, ") (i32.const ");
      _strPushInt(output, offset);
      offset = offset + 4;
      _strPushRaw(output, ") (i32.const 1))\n");

      token = nextToken(tokenValue);
      if (token == 58) {  // :
        expectToken(3, tokenValue);  // type name
        expectToken(59, tokenValue);  // ;
      } else if (token == 59) {  // ;
        // no-op
      } else {
        _throw("Expected type or semicolon after class property");
      }
    } else {
      _throw("Expected field declaration in class body");
    }
  }
  _strPushRaw(output, "    (local.get $fields)\n");
  _strPushRaw(output, "  )\n");

  _strPushRaw(output, "  (global $_class_");
  _strPush(output, className);
  _strPushRaw(output, "_size i32 (i32.const ");
  _strPushInt(output, offset);
  _strPushRaw(output, "))\n");

  _strPushRaw(output, "  (func $_class_");
  _strPush(output, className);
  _strPushRaw(output, "_new (result i32)\n");
  _strPushRaw(output, "    (local $obj i32)\n");
  _strPushRaw(output, "    (local.set $obj (call $_malloc (i32.const ");
  _strPushInt(output, offset);
  _strPushRaw(output, ")))\n");
  _strPushRaw(output, "    (i32.store (local.get $obj) (i32.const ");
  _strPushInt(output, classId);
  _strPushRaw(output, "))\n");
  _strPushRaw(output, "    (local.get $obj)\n");
  _strPushRaw(output, "  )\n");

  _strDelete(tokenValue);
  _strDelete(className);
  return output;
}
// Entry point.
fn compileModule() {
  let output, token, tokenValue, stringConstantsLen, classesLen, i, rawOutput;

  output = _strNew(0);
  tokenValue = _strNew(0);
  _dictClear(globalVars);

  // Main body.
  while (1) {
    token = peekNextToken(tokenValue);

    if (token == 0) {
      break;
    }

    // Fn
    if (token == 4) {
      _strMerge(output, compileFn());
      continue;
    }

    // Let
    if (token == 5) {
      expectToken(5, tokenValue);  // identifier
      _strPushRaw(output, " ");
      while (1) {
        expectToken(3, tokenValue);  // identifier
        addGlobalVar(tokenValue);
        _strPushRaw(output, " (global $");
        _strPush(output, tokenValue);
        token = nextToken(tokenValue);
        if (token == 58) {  // :
          expectToken(3, tokenValue);
          token = nextToken(tokenValue);
        }
        _strPushRaw(output, " (mut i32) (i32.const 0))");
        if (token == 59) {  // ;
          break;
        } else if (token == 44) {  // ,
          // continue;
        } else {
          _strClear(output);
          _strPushRaw(output, "Expected ',' or ';' in global let statement, got ");
          _strPushInt(output, token);
          _strPushRaw(output, " with value '");
          _strMerge(output, tokenValue);
          _strPushRaw(output, "'");
          _throw(_strToRaw(output));
        }
      }
      _strPushRaw(output, "\n");
      continue;
    }

    // Class
    if (token == 12) {
      _strMerge(output, compileClass());
      continue;
    }

    _strClear(output);
    _strPushRaw(output, "Expected fn or let at module level, got ");
    _strPushInt(output, token);
    _strPushRaw(output, " with value '");
    _strMerge(output, tokenValue);
    _strPushRaw(output, "'");
    _throw(_strToRaw(output));
  }

  // Classes
  classesLen = _dictLen(classes);
  if (classesLen > 0) {
    _strPushRaw(output, "  (global $_classes (mut i32) (i32.const 0))\n");
    _strPushRaw(output, "  (func $_classesInit\n");
    _strPushRaw(output, "    (global.set $_classes (call $_arrNew (i32.const ");
    _strPushInt(output, classesLen + 1);
    _strPushRaw(output, ")))\n");
    _strPushRaw(output, "    (call $_arrPush (global.get $_classes) (i32.const 0))\n");
    i = 0;
    while (i < classesLen) {
      _strPushRaw(output, "    (call $_arrPush (global.get $_classes) (call $_class_");
      _strPush(output, _dictGetKeyAt(classes, i));
      _strPushRaw(output, "_fields))\n");
      i = i + 1;
    }
    _strPushRaw(output, "  )\n");
  }

  // String constants
  stringConstantsLen = _dictLen(stringConstantOffsets);
  i = 0;
  while (i < stringConstantsLen) {
    _strPushRaw(output, "  (data (i32.const ");
    _strPushInt(output, _dictGetValueAt(stringConstantOffsets, i));
    _strPushRaw(output, ") ");
    _strPushChar(output, 34);  // "
    _strPush(output, _dictGetKeyAt(stringConstantOffsets, i));
    _strPushRaw(output, "\\00");
    _strPushChar(output, 34);  // "
    _strPushRaw(output, ")\n");
    i = i + 1;
  }

  _dictClear(globalVars);
  _dictClear(classes);
  _strDelete(tokenValue);
  rawOutput = _strToRaw(output);
  _free(output);
  return rawOutput;
}

// Lexer.
//
// Token types:
//   00 - EOF
//   01 - Number literal
//   02 - String literal
//   03 - Identifier
//   04 - fn
//   05 - let
//   06 - if
//   07 - else
//   08 - while
//   09 - return
//   10 - break
//   11 - continue
//   12 - class
//   13 - new
//   14 - delete
// Single letter operators and symbol are their ASCII value. Double letter
// operators are 128 + the ASCII value of the first letter.
let keywords;
let twoCharOperators;
fn lexerInit(input) {
  inputPtr = input;
  keywords = _dictNew(16);
  // Keywords in the order of their values.
  _dictSetRaw(keywords, "fn", 1, 0);
  _dictSetRaw(keywords, "let", 1, 0);
  _dictSetRaw(keywords, "if", 1, 0);
  _dictSetRaw(keywords, "else", 1, 0);
  _dictSetRaw(keywords, "while", 1, 0);
  _dictSetRaw(keywords, "return", 1, 0);
  _dictSetRaw(keywords, "break", 1, 0);
  _dictSetRaw(keywords, "continue", 1, 0);
  _dictSetRaw(keywords, "class", 1, 0);
  _dictSetRaw(keywords, "new", 1, 0);
  _dictSetRaw(keywords, "delete", 1, 0);
  twoCharOperators = _dictNew(16);
  _dictSetRaw(twoCharOperators, "==", 1, 0);
  _dictSetRaw(twoCharOperators, "!=", 1, 0);
  _dictSetRaw(twoCharOperators, "<=", 1, 0);
  _dictSetRaw(twoCharOperators, ">=", 1, 0);
  _dictSetRaw(twoCharOperators, "&&", 1, 0);
  _dictSetRaw(twoCharOperators, "||", 1, 0);
}
fn lexerCleanUp() {
  _dictDelete(keywords);
  _dictDelete(twoCharOperators);
}
fn nextToken(tokenValue) {
  let c, c2;

  _strClear(tokenValue);
  skipWhitespaceAndComments();
  c = curChar();

  // EOF
  if (c == 0) {
    return 0;
  }

  // Number literal
  if (isDigit(c)
    || (c == 45 && isDigit(peekNextChar()))) {  // -
    while (1) {
      _strPushChar(tokenValue, c);
      c = nextChar();
      if (!isDigit(c)) {
        break;
      }
    }
    return 1;
  }

  // String literal
  if (c == 34) {  // "
    while (1) {
      c = nextChar();
      if (c == 0) {
        _throw("Unterminated string literal");
      }
      if (c == 34) {  // "
        break;
      }
      _strPushChar(tokenValue, c);
    }
    nextChar();
    return 2;
  }

  // Identifier or keyword.
  if (isIdent(c)) {
    while (isIdent(c)) {
      _strPushChar(tokenValue, c);
      c = nextChar();
    }
    return 4 + _dictFind(keywords, tokenValue);
  }

  // Operators.
  if (strchr("(){}[]<>=+-*/%!&|.,;:^", c)) {
    _strPushChar(tokenValue, c);
    _strPushChar(tokenValue, nextChar());
    if (_dictFind(twoCharOperators, tokenValue) >= 0) {
      nextChar();
      return c + 128;
    } else {
      _strPop(tokenValue);
      return c;
    }
  }

  _throw("Unrecognized character");
}
fn peekNextToken(tokenValue) {
  let origInputPtr, token;
  origInputPtr = inputPtr;
  token = nextToken(tokenValue);
  inputPtr = origInputPtr;
  return token;
}
fn skipWhitespaceAndComments() {
  let c;
  c = curChar();
  while (1) {
    if (isSpace(c)) {
      c = nextChar();
    } else if (c == 47 && peekNextChar() == 47) {  // "/"
      nextChar();
      c = nextChar();
      while (c != 10 && c != 0) {  // LF
        c = nextChar();
      }
    } else {
      break;
    }
  }
}
fn nextChar() {
  inputPtr = inputPtr + 1;
  return _load8_u(inputPtr);
}
fn peekNextChar() {
  return _load8_u(inputPtr + 1);
}
fn curChar() {
  return _load8_u(inputPtr);
}
fn isSpace(c) {
  return c == 32  // space
    || c == 9     // tab
    || c == 13    // CR
    || c == 10;   // LF
}
fn isDigit(c) {
  return c >= 48  // 0
    && c <= 57;   // 9
}
fn isAlpha(c) {
  return (c >= 65 && c <= 90) || (c >= 97 && c <= 122);
}
fn isIdent(c) {
  return isAlpha(c) || isDigit(c) || c == 95; // _
}
fn strchr(rawStr, c) {
  let c2;
  while (1) {
    c2 = _load8_u(rawStr);
    if (c2 == 0) {
      return 0;
    }
    if (c == c2) {
      return rawStr;
    }
    rawStr = rawStr + 1;
  }
}

fn indent(indentLevel) {
  let str, i;
  str = _strNew(indentLevel * 2);
  i = 0;
  while (i < indentLevel) {
    _strPushRaw(str, "  ");
    i = i + 1;
  }
  return str;
}
fn init(input, heapStart, heapEnd) {
  _memoryInit(heapStart, heapEnd);
  lexerInit(input);
  symbolsInit(heapEnd);
}
fn cleanUp() {
  lexerCleanUp();
  symbolsCleanUp();
}
