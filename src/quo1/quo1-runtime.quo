// Memory allocation via simple first-fit algorithm.
//
// Chunk header is 16 bytes:
//   0  i32 - chunk size in bytes
//   4  i32 - next chunk header or 0
//   8  i32 - prev chunk header or 0
//   12 byte - used = 1, free = 0
//   16 chunk data
// Minimum chunk data size is 16 bytes (so total 32 bytes with header).
let heapStart;
let heapEnd;
fn memoryInit(start, end) {
  let size, chunk;
  if (start <= 0) {
    _throw("Memory cannot start at 0");
  }
  size = end - start;
  if (size < 16) {
    _throw("Memory must be greater than 16 bytes");
  }
  heapStart = start;
  heapEnd = end;
  chunk = start;
  _store(chunk, heapEnd - heapStart - 16);
  _store(chunk + 4, 0);
  _store(chunk + 8, 0);
  _store8(chunk + 12, 0);
}
fn malloc(size) {
  let sizeWithHeader, chunk, chunkSize, nextChunk, newChunk;
  if (size <= 0) {
    return 0;
  }
  size = (size + 15) / 16 * 16;
  sizeWithHeader = size + 16;
  chunk = heapStart;
  while (chunk != 0) {
    chunkSize = _load(chunk);
    nextChunk = _load(chunk + 4);
    if (!_load8_u(chunk + 12)) {
      if (chunkSize >= size + 32) {
        // Split current chunk and return it.
        //
        // Create new chunk.
        newChunk = chunk + 16 + size;
        _store(newChunk, chunkSize - size - 16);
        _store(newChunk + 4, nextChunk);
        _store(newChunk + 8, chunk);
        _store8(newChunk + 12, 0);
        // Update original next chunk.
        if (nextChunk) {
          _store(nextChunk + 8, newChunk);
        }
        // Update current chunk.
        _store(chunk, size);
        _store(chunk + 4, newChunk);
        _store8(chunk + 12, 1);
        return chunk + 16;
      } else if (chunkSize >= size) {
        // Just mark current chunk as used and return it
        _store8(chunk + 12, 1);
        return chunk + 16;
      }
    }
    chunk = nextChunk;
  }
  _throw("Out of memory");
}
fn free(ptr) {
  let chunk, size, prevChunk, nextChunk, nextNextChunk;
  if (ptr == 0 || ptr < heapStart + 16 ||  ptr > heapEnd - 16) {
    return;
  }
  chunk = ptr - 16;
  if (_load8_u(chunk + 12) == 0) {
    _throw("Double free");
  }
  _store8(chunk + 12, 0);
  size = _load(chunk + 0);
  nextChunk = _load(chunk + 4);
  prevChunk = _load(chunk + 8);
  // Merge with prev chunk if prev chunk is free
  if (prevChunk && !_load8_u(prevChunk + 12)) {
    chunk = prevChunk;
    size = _load(chunk + 0) + size + 16;
    _store(chunk + 0, size);
    _store(chunk + 4, nextChunk);
    if (nextChunk) {
      _store(nextChunk + 8, chunk);
    }
  }
  // Merge with next chunk if next chunk is free
  if (nextChunk && !_load8_u(nextChunk + 12)) {
    size = size + _load(nextChunk + 0) + 16;
    _store(chunk + 0, size);
    nextNextChunk = _load(nextChunk + 4);
    _store(chunk + 4, nextNextChunk);
    if (nextNextChunk) {
      _store(nextNextChunk + 8, chunk);
    }
  }
}

// Strings.
//
// Strings are represented as a header and a linked list of chunks. This
// representation helps reduce copying when building strings, which is a common
// operation during compilation.
//
// A string must have at least 1 chunk and at most 8 chunks.
// Each chunk starts off with at least 32 bytes and grows by a factor of 2.
//
// String header is 8 bytes:
//   00 i32 - string length
//   04 i32 - first chunk address (always non-null)
//
//  Chunk header is 12 bytes:
//    00 i32 - chunk size
//    04 i32 - length of string in chunk
//    08 i32 - next chunk address, 0 if last chunk
//    12 data
fn strNew(reserveLen) {
  let str;
  str = malloc(8);
  _store(str + 0, 0);
  _store(str + 4, strNewChunk(reserveLen, 0, 0, 0));
  return str;
}
fn strFromRaw(rawStr) {
  let len, str;
  len = rawStrLen(rawStr);
  str = malloc(8);
  _store(str + 0, len);
  _store(str + 4, strNewChunk(len, len, 0, rawStr));
  return str;
}
fn strDelete(str) {
  let chunk, nextChunk;
  chunk = _load(str + 4);
  while (chunk) {
    nextChunk = _load(chunk + 8);
    free(chunk);
    chunk = nextChunk;
  }
  free(str);
}
fn strClear(str) {
  let headChunk, chunk, nextChunk;
  headChunk = _load(str + 4);
  chunk = _load(headChunk + 8);
  while (chunk) {
    nextChunk = _load(chunk + 8);
    free(chunk);
    chunk = nextChunk;
  }
  _store(str + 0, 0);
  _store(headChunk + 4, 0);
  _store(headChunk + 8, 0);
}
fn strFlatten(str) {
  let len, headChunk, chunkLen, newHeadChunk, chunk, nextChunk, nextChunkLen;
  len = _load(str + 0);
  headChunk = _load(str + 4);
  chunkLen = _load(headChunk + 4);
  if (len == chunkLen) {
    return;
  }
  chunk = _load(headChunk + 8);
  // If first headChunk is not large enough to hold entire string, replace it with a
  // new headChunk that has sufficient size.
  if (_load(headChunk + 0) < len) {
    newHeadChunk = strNewChunk(len, chunkLen, 0, headChunk + 12);
    free(headChunk);
    headChunk = newHeadChunk;
    _store(str + 4, headChunk);
  } else if (chunk) {
    _store(headChunk + 8, 0);
  }
  _store(headChunk + 4, len);
  while (chunk) {
    nextChunkLen = _load(chunk + 4);
    nextChunk = _load(chunk + 8);
    if (nextChunkLen) {
      _memcpy(headChunk + 12 + chunkLen, chunk + 12, nextChunkLen);
      chunkLen = chunkLen + nextChunkLen;
    }
    free(chunk);
    chunk = nextChunk;
  }
}
fn strToRaw(str) {
  let len, chunk, result;
  strFlatten(str);
  len = _load(str + 0);
  chunk = _load(str + 4);
  result = malloc(len + 1);
  _memcpy(result, chunk + 12, len);
  _store8(result + len, 0);
  return result;
}
// Append str2 to str1 and delete str2.
fn strMerge(str1, str2) {
  let str1Len, str2Len, str1TailChunk, str2HeadChunk, str1TailChunkSize, str1TailChunkLen, str2HeadChunkLen;
  str1Len = _load(str1 + 0);
  str2Len = _load(str2 + 0);

  // Special case: if both strings are empty, nothing to do.
  if (str1Len == 0 && str2Len == 0) {
    strDelete(str2);
    return str1;
  }

  // Special case: if str1 is empty but str2 isn't, take ownership of str2's
  // chunks.
  if (str1Len == 0) {
    str1TailChunk = _load(str1 + 4);
    str2HeadChunk = _load(str2 + 4);
    free(str1TailChunk);
    _store(str1 + 0, str1Len + str2Len);
    _store(str1 + 4, str2HeadChunk);
    free(str2);
    return str1;
  }

  str1TailChunk = strGetTailChunk(str1);
  str2HeadChunk = _load(str2 + 4);
  str1TailChunkSize = _load(str1TailChunk + 0);
  str1TailChunkLen = _load(str1TailChunk + 4);
  str2HeadChunkLen = _load(str2HeadChunk + 4);
  if (str1TailChunkLen + str2HeadChunkLen <= str1TailChunkSize) {
    // Merge str2's first chunk with str1's last chunk if possible.
    _store(str1TailChunk + 4, str1TailChunkLen + str2HeadChunkLen);
    _store(str1TailChunk + 8, _load(str2HeadChunk + 8));
    _memcpy(str1TailChunk + 12 + str1TailChunkLen, str2HeadChunk + 12, str2HeadChunkLen);
    free(str2HeadChunk);
    free(str2);
  } else {
    // Else, add str2's first chunk after str1's last chunk.
    _store(str1TailChunk + 8, str2HeadChunk);
    free(str2);
  }
  _store(str1 + 0, str1Len + str2Len);
  return str1;
}
fn strPush(str1, str2) {
  return strMerge(str1, strClone(str2));
}
fn strPushRaw(str1, str2) {
  let str1Len, str2Len, str1TailChunk, str1TailChunkSize, str1TailChunkLen, newChunk;
  str2Len = rawStrLen(str2);
  if (str2Len == 0) {
    return str1;
  }
  str1Len = _load(str1 + 0);
  str1TailChunk = strGetTailChunk(str1);
  str1TailChunkSize = _load(str1TailChunk + 0);
  str1TailChunkLen = _load(str1TailChunk + 4);
  _store(str1 + 0, str1Len + str2Len);
  if (str1TailChunkLen + str2Len <= str1TailChunkSize) {
    // Merge str2 into last str1TailChunk.
    _store(str1TailChunk + 4, str1TailChunkLen + str2Len);
    _memcpy(str1TailChunk + 12 + str1TailChunkLen, str2, str2Len);
  } else {
    // Create new chunk from str2 and add it after str1TailChunk.
    newChunk = strNewChunk(str2Len, str2Len, 0, str2);
    _store(str1TailChunk + 8, newChunk);
  }
  return str1;
}
fn strFromChar(c) {
  let str, chunk;
  str = strNew(1);
  chunk = strGetTailChunk(str);
  _store(str + 0, 1);
  _store(chunk + 4, 1);
  _store8(chunk + 12, c);
  return str;
}
fn strPushChar(str1, c) {
  return strMerge(str1, strFromChar(c));
}
fn strPop(str) {
  let len, tailChunk, tailChunkLen;
  len = strLen(str);
  if (len < 1) {
    return 0;
  }
  tailChunk = strGetTailChunk(str);
  tailChunkLen = _load(tailChunk + 4);
  _store(str + 0, len - 1);
  _store(tailChunk + 4, tailChunkLen - 1);
  return _load8_u(tailChunk + 12 + tailChunkLen - 1);
}
fn strLen(str) {
  return _load(str + 0);
}
fn strGetTailChunk(str) {
  let chunk, nextChunk, chunkCount;
  chunk = _load(str + 4);
  chunkCount = 1;
  while (1) {
    nextChunk = _load(chunk + 8);
    if (!nextChunk) {
      return chunk;
    }
    chunkCount = chunkCount + 1;
    if (chunkCount >= 8) {
      strFlatten(str);
      return _load(str + 4);
    }
    chunk = nextChunk;
  }
}
fn strNewChunk(minSize, len, next, src) {
  let newChunk, newChunkSize;
  newChunkSize = (minSize + 3) / 4 * 4;
  if (newChunkSize < 32) {
    newChunkSize = 32;
  }
  newChunk = malloc(12 + newChunkSize);
  _store(newChunk + 0, newChunkSize);
  _store(newChunk + 4, len);
  _store(newChunk + 8, next);
  if (src) {
    _memcpy(newChunk + 12, src, len);
  }
  return newChunk;
}
// Compare str against raw string.
fn strCmpRaw(str1, str2) {
  strFlatten(str1);
  return memcmp2(_load(str1 + 4) + 12, strLen(str1), str2, rawStrLen(str2));
}
// Compare str against str.
fn strCmp(str1, str2) {
  strFlatten(str1);
  strFlatten(str2);
  return memcmp2(_load(str1 + 4) + 12, strLen(str1), _load(str2 + 4) + 12, strLen(str2));
}
fn strClone(str) {
  let len, newStr, newChunk, chunk;
  strFlatten(str);
  len = strLen(str);
  newStr = strNew(len);
  _store(newStr + 0, len);
  chunk = _load(str + 4);
  newChunk = _load(newStr + 4);
  _store(newChunk + 4, len);
  _memcpy(newChunk + 12, chunk + 12, len);
  return newStr;
}
fn strFromInt(n) {
  let rawStr, str;
  rawStr = malloc(16);
  str = strFromRaw(itoa(n, rawStr));
  free(rawStr);
  return str;
}
fn strPushInt(str1, n) {
  return strMerge(str1, strFromInt(n));
}

// Arrays - logically equivalent to Array<number>.
//
// Arrays are represented as a classic dynamic array, i.e. the equivalent of a
// C++ vector. Each element is an i32.
//
// Array header is 12 bytes:
//   00 i32 size - allocated ize in number of elements, so size in bytes is size * 4.
//   04 i32 len - number of elements in use.
//   08 i32 data - address of data
// So address of element k is data + k * 4.
fn arrNew(reserveLen) {
  let arr, size, data;
  if (reserveLen < 4) {
    size = 4;
  } else {
    size = reserveLen;
  }
  arr = malloc(12);
  _store(arr + 0, size);
  _store(arr + 4, 0);
  _store(arr + 8, malloc(size * 4));
  return arr;
}
fn arrDelete(arr) {
  arrClear(arr);
  free(_load(arr + 8));
  free(arr);
}
fn arrPush(arr, elem) {
  let size, len, data, newSize, newData;
  size = _load(arr + 0);
  len = _load(arr + 4);
  data = _load(arr + 8);
  if (len > size) {
    _throw("Array len exceeds size");
  }
  if (len == size) {
    newSize = size * 2;
    newData = malloc(newSize * 4);
    _memcpy(newData, data, size * 4);
    free(data);
    _store(arr + 0, newSize);
    _store(arr + 8, newData);
    data = newData;
  }
  _store(arr + 4, len + 1);
  _store(data + len * 4, elem);
}
fn arrLen(arr) {
  return _load(arr + 4);
}
fn arrClear(arr) {
  _store(arr + 4, 0);
}
fn arrGet(arr, i) {
  if (i < 0 || i >= arrLen(arr)) {
    _throw("Array index out of bounds");
  }
  return _load(_load(arr + 8) + i * 4);
}
fn arrSet(arr, i, v) {
  if (i < 0 || i >= arrLen(arr)) {
    _throw("Array index out of bounds");
  }
  _store(_load(arr + 8) + i * 4, v);
}

// Dict - logically equivalent to Map<string, number>.
//
// The implementation uses two arrays, one for keys and one for values. Lookup
// is done by searching in the keys array and returning the value at the same
// index. This is quite inefficient obviously, i.e. O(key count * key length),
// but meh.
//
// Dict header is 8 bytes:
//   00 i32 - address of keys array
//   04 i32 - address of values array
fn dictNew(reserveLen) {
  let dict;
  dict = malloc(8);
  _store(dict + 0, arrNew(reserveLen));
  _store(dict + 4, arrNew(reserveLen));
  return dict;
}
fn dictClear(dict) {
  let len, i, keys, values;
  keys = _load(dict + 0);
  values = _load(dict + 4);
  len = arrLen(keys);
  i = 0;
  while (i < len) {
    strDelete(arrGet(keys, i));
    i = i + 1;
  }
  arrClear(keys);
  arrClear(values);
}
fn dictDelete(dict) {
  let keys, values;
  keys = _load(dict + 0);
  values = _load(dict + 4);
  dictClear(dict);
  arrDelete(keys);
  arrDelete(values);
  free(dict);
}
fn dictFind(dict, str) {
  let len, i, keys, values;
  keys = _load(dict + 0);
  len = arrLen(keys);
  i = 0;
  while (i < len) {
    if (strCmp(str, arrGet(keys, i)) == 0) {
      return i;
    }
    i = i + 1;
  }
  return -1;
}
fn dictGet(dict, key) {
  let i, values;
  i = dictFind(dict, key);
  if (i >= 0) {
    values = _load(dict + 4);
    return arrGet(values, i);
  }
  // This is rather awkward - since dict is storing i32 values, there are
  // no obvious ways to return an invalid value. But we'll mostly be using
  // dict to _store pointers, so 0 i.e. null is the most reasonable result.
  return 0;
}
fn dictSet(dict, key, v, shouldFreeOldValue) {
  let len, i, keys, values, newKey;
  keys = _load(dict + 0);
  values = _load(dict + 4);
  len = arrLen(keys);
  i = dictFind(dict, key);
  if (i < 0) {
    i = len;
    newKey = strClone(key);
    arrPush(keys, newKey);
    arrPush(values, v);
  } else {
    if (shouldFreeOldValue) {
      free(arrGet(values, i));
    }
    arrSet(values, i, v);
  }
}
fn dictSetRaw(dict, rawKey, v, shouldFreeOldValue) {
  let key;
  key = strFromRaw(rawKey);
  dictSet(dict, key, v, shouldFreeOldValue);
  strDelete(key);
}
fn dictLen(dict) {
  let keys;
  keys = _load(dict + 0);
  return arrLen(keys);
}
fn dictGetKeyAt(dict, i) {
  let keys;
  keys = _load(dict + 0);
  return arrGet(keys, i);
}
fn dictGetValueAt(dict, i) {
  let values;
  values = _load(dict + 4);
  return arrGet(values, i);
}


// Raw (i.e., C-style, null terminated) strings.
fn rawStrLen(str) {
  let len;
  while (_load8_u(str)) {
    len = len + 1;
    str = str + 1;
  }
  return len;
}
fn itoa(n, rawStr) {
  let p;
  p = rawStr + 11;
  _store8(p, 0);
  while (1) {
    p = p - 1;
    _store8(p, n % 10 + 48);
    n = n / 10;
    if (n == 0) {
      break;
    }
  }
  return p;
}
fn memcmp(p1, p2, size) {
  let offset, v1, v2;
  if (p1 == p2 || size == 0) {
    return 0;
  }
  offset = 0;
  while (offset < size) {
    v1 = _load8_u(p1 + offset);
    v2 = _load8_u(p2 + offset);
    if (v1 != v2) {
      return v1 - v2;
    }
    offset = offset + 1;
  }
  return 0;
}
fn memcmp2(p1, p1Size, p2, p2Size) {
  if (p1Size < p2Size) {
    return memcmp(p1, p2, p1Size) || -1;
  } else if (p1Size > p2Size) {
    return memcmp(p1, p2, p2Size) || 1;
  }
  return memcmp(p1, p2, p1Size);
}
