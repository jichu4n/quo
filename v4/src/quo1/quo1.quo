// Lexer.
//
// Token types:
//   00 - EOF
//   01 - Number literal
//   02 - String literal
//   03 - Identifier
//   04 - fn
//   05 - let
//   06 - if
//   07 - else
//   08 - while
//   09 - return
//   10 - break
//   11 - continue
// Single letter operators and symbol are their ASCII value. Double letter
// operators are 128 + the ASCII value of the first letter.
let inputPtr;
fn nextToken(value): Int {
  let c;

  strClear(value);
  skipWhitespaceAndComments();
  c = curChar();

  // EOF
  if (c == 0) {
    return 0;
  }

  // Number literal
  if (isDigit(c)
    || (c == 45 && isDigit(peekNextChar()))) {  // -
    while (1) {
      strAppendChar(value, c);
      c = nextChar();
      if (!isDigit(c)) {
        break;
      }
    }
    return 1;
  }

  // String literal
  if (c == 34) {  // "
    while (1) {
      c = nextChar();
      if (c == 0) {
        throw("Unterminated string literal");
      }
      if (c == 34) {  // "
        break;
      }
      strAppendChar(value, c);
    }
    nextChar();
    return 2;
  }

  // TODO: identifier, keyword, operator

  throw("Unrecognized character");
}
fn skipWhitespaceAndComments() {
  let c;
  while (1) {
    c = curChar();
    if (isSpace(c)) {
      inputPtr = inputPtr + 1;
    } else if (c == 47 && peekNextChar() == 47) {  // "/"
      inputPtr = inputPtr + 2;
      c = curChar();
      while (c != 10 && c != 0) {  // LF
        c = nextChar();
      }
    } else {
      break;
    }
  }
}
fn nextChar(): Int {
  inputPtr = inputPtr + 1;
  return load8_u(inputPtr);
}
fn peekNextChar(): Int {
  return load8_u(inputPtr + 1);
}
fn curChar(): Int {
  return load8_u(inputPtr);
}
fn isSpace(c): Int {
  return c == 32  // space
    || c == 9     // tab
    || c == 13    // CR
    || c == 10;   // LF
}
fn isDigit(c): Int {
  return c >= 48  // 0
    && c <= 57;   // 9
}


// Entry point.
fn compileModule(): String {
  return "  ;; placeholder";
}
fn indent(indentLevel): String {
  let str, i;
  str = strNew(indentLevel * 2);
  i = 0;
  while (i < indentLevel) {
    strAppendRaw(str, "  ");
    i = i + 1;
  }
  return str;
}
fn init(input, memoryEnd) {
  // Usable memory is between end of input and 15MB where we'll place string literals.
  memoryInit((input + rawStrLen(input) + 1 + 3) / 4 * 4, memoryEnd);
  inputPtr = input;
}
